Index: .idea/shelf/Uncommitted_changes_before_Update_at_3_1_2022_12_22_PM.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_3_1_2022_12_22_PM.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_3_1_2022_12_22_PM.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_3_1_2022_12_22_PM.xml	(revision 48100aa5f760e5fc65be50c88a24a6e6332bda21)
+++ /dev/null	(revision 48100aa5f760e5fc65be50c88a24a6e6332bda21)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_3_1_2022_12_22_PM" date="1646115777377" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_3_1_2022_12_22_PM/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 3/1/2022 12:22 PM" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_2_17_2022_10_50_PM_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_2_17_2022_10_50_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_2_17_2022_10_50_PM_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_2_17_2022_10_50_PM_[Default_Changelist]/shelved.patch	(revision 48100aa5f760e5fc65be50c88a24a6e6332bda21)
+++ /dev/null	(revision 48100aa5f760e5fc65be50c88a24a6e6332bda21)
@@ -1,312 +0,0 @@
-Index: Python Essential/20 Essential Python code.py
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+># Swaping values\r\na, b = 5, 10\r\nprint(a, b)\r\na, b = b, a\r\nprint(a, b)\r\n\r\n# One string of all items within a list\r\np = [\"Python\", \"is\", \"a\", \"popular\", \"language\"]\r\nprint(\" \".join(p))\r\n\r\n# Most common element in the list\r\nlist1 = [0, 1, 2, 3, 3, 2, 3, 1, 4, 5, 4]\r\nprint(max(set(list1), key=list1.count))\r\n\r\n# Test if two strings are anagrams\r\nfrom collections import Counter\r\n\r\n\r\ndef anagram(string_1, string_2):\r\n    return Counter(string_1) == Counter(string_2)\r\n\r\n\r\nanagram('pqrs', 'rqsp')\r\nanagram('pqrs', 'rqqs')\r\n\r\n# Reverse a string with slicing\r\nstr = \"PQRST\"\r\nreverse_str = str[::-1]\r\nprint(reverse_str)\r\n\r\n\r\n# Reverse a list using slicing approach\r\ndef Reverse(lst):\r\n    lst1 = lst[::-1]\r\n    return lst1\r\n\r\n\r\nlst = [5, 6, 7, 8, 9, 10]\r\nprint(Reverse(lst))\r\n\r\n# Transpose a matrix\r\nmat = [(5, 6, 7), (8, 9, 10), (11, 12, 13), (14, 15, 16)]\r\nfor row in mat:\r\n    print(row)\r\nprint(\"\\n\")\r\nt_mat = zip(*mat)\r\nfor row in t_mat:\r\n    print(row)\r\n\r\n# Chained comparison\r\na = 3\r\nprint(1 < a < 10)\r\nprint(5 < a < 15)\r\nprint(a < 7 < a * 7 < 49)\r\nprint(8 > a <= 6)\r\nprint(3 == a > 2)\r\n\r\n# Dictionary â€˜getâ€™\r\ndict = {\"P\": 1, \"Q\": 2}\r\nprint(dict[\"P\"])\r\nprint(dict[\"R\"])\r\n\r\ndict = {\"P\": 1, \"Q\": 2}\r\nprint(dict.get(\"P\"))\r\nprint(dict.get(\"R\"))\r\nprint(dict.get(\"R\", \"Unavailable! \"))\r\n\r\n\r\n# Sort dictionary by value\r\ndef dict():\r\n    keyval = {}\r\n\r\n    # Initializing the value\r\n    keyval[3] = 48\r\n    keyval[2] = 6\r\n    keyval[5] = 10\r\n    keyval[1] = 22\r\n    keyval[6] = 15\r\n    keyval[4] = 245\r\n    print(\"Task 3:-\\nKeys and Values sorted\",\r\n          \"in alphabetical order by the value\")\r\n    # Remember this would arrange in aphabetical sequence\r\n    # Convert it to float to mathematical purposes\r\n    print(sorted(keyval.elements(), key=\r\n    lambda k_val: (k_val[1], k_val[0])))\r\n\r\n\r\ndef main():\r\n    dict()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n# List comprehension\r\nlist1 = [2, 4, 6, 8]\r\nlist2 = [3 * p for p in list1]\r\nprint(list2)\r\n\r\n# Time consumed to implement a part of the program\r\nimport time\r\n\r\ninitial_Time = time.time()\r\n# Program to test follows\r\nx, y = 5, 6\r\nz = x + y\r\n# Program to test ending\r\nending_Time = time.time()\r\nTime_lapsed_in_Micro_sec = (ending_Time - initial_Time) * (10 ** 6)\r\nprint(\" Time lapsed in micro_seconds: {0} ms\").format(Time_lapsed_in_Micro_sec)\r\n\r\n# Merge dictionaries\r\ndic1 = {'men': 6, 'boy': 5}\r\ndic2 = {'boy': 3, 'girl': 5}\r\nmerged_dic = {**dic1, **dic2}\r\nprint(merged_dic)\r\n\r\n# Digitize\r\nnumber = 2468\r\n# with map\r\ndigit_list = list(map(int, str(number)))\r\nprint(digit_list)\r\n[2, 4, 6, 8]\r\n# with list comprehension\r\ndigit_list = [int(a) for a in str(number)]\r\nprint(digit_list)\r\n[2, 4, 6, 8]\r\n# Even simpler approach\r\ndigit_list = list(str(number))\r\nprint(digit_list)\r\n\r\n\r\n# Test for uniqueness\r\n\r\ndef uniq(list):\r\n    if len(list) == len(set(list)):\r\n        print(\"total items are unique\")\r\n    else:\r\n        print(\"List includes duplicate item\")\r\n\r\n\r\nuniq([0, 2, 4, 6])\r\n# total items are unique\r\nuniq([1, 3, 3, 5])\r\n# List includes duplicate item\r\n\r\n# Using enumeration\r\nsample_list = [4, 5, 6]\r\nfor j, item in enumerate(sample_list):\r\n    print(j, ': ', item)\r\n\r\n# Evaluate the factorial of any number in a single line\r\nimport functools\r\n\r\nfact = (lambda i: functools.reduce(int.__mul__, range(1, i + 1), 1)(4))\r\nprint(fact)\r\n\r\n\r\n# Return several functionsâ€™ elements\r\ndef a():\r\n    return 5, 6, 7, 8\r\n\r\n\r\n# Calling the above function.\r\nw, x, y, z = a()\r\nprint(w, x, y, z)\r\n\r\n\r\n# Incorporate a true Python switch-case statement\r\ndef aswitch(a):\r\n    return aswitch._system_dic.get(a, None)\r\n\r\n\r\naswitch._system_dic = {'mangoes': 4, 'apples': 6, 'oranges': 8}\r\nprint(aswitch('default'))\r\nprint(aswitch('oranges'))\r\n\r\n\r\n# With splat operator unpacking function arguments\r\ndef test(a, b, c):\r\n    print(p, q, r)\r\n\r\n\r\ntest_Dic = {'a': 4, 'b': 5, 'c': 6}\r\ntest_List = [10, 11, 12]\r\ntest(*test_Dic)\r\ntest(**test_Dic)\r\ntest(*test_List)\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/Python Essential/20 Essential Python code.py b/Python Essential/20 Essential Python code.py
---- a/Python Essential/20 Essential Python code.py	(revision 78caef508ee6b11b9d96b11934304396a82c0028)
-+++ b/Python Essential/20 Essential Python code.py	(date 1618734384976)
-@@ -186,3 +186,131 @@
- test(*test_Dic)
- test(**test_Dic)
- test(*test_List)
-+
-+## ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** *
-+
-+a, b, c = 4, 5.5, 'Hello'
-+
-+# Extract value
-+a, b, *c = [1, 2, 3, 4, 5]
-+print(a, b, c)
-+
-+# Do Sum from a list
-+a = [1, 2, 3, 4, 5, 6]
-+s = sum([num for num in a if num % 2 == 0])
-+print(s)
-+
-+#### Deleting all even
-+a = [1, 2, 3, 4, 5]
-+del a[1::2]
-+print(a)
-+
-+# Reading Files
-+lst = [line.strip() for line in open('data.txt')]
-+print(lst)
-+
-+##Using with will also close the file after use
-+list(open('data.txt'))
-+with open("data.txt") as f:
-+    lst = [line.strip() for line in f]
-+print(lst)
-+
-+# Writing data to file
-+with open("data.txt", 'a', newline='\n') as f:
-+    f.write("Python is awsome")
-+
-+# Creating Lists
-+lst = [i for i in range(0, 10)]
-+print(lst)
-+# or
-+lst = list(range(0, 10))
-+print(lst)
-+
-+# We can also create a list of strings using the same method.
-+lst = [("Hello " + i) for i in ['Karl', 'Abhay', 'Zen']]
-+print(lst)
-+
-+# Mapping Lists or TypeCasting Whole List
-+list(map(int, ['1', '2', '3']))
-+list(map(float, [1, 2, 3]))
-+[float(i) for i in [1, 2, 3]]
-+
-+#### Square of all even numbers in an range
-+x = {x ** 2 for x in range(10) if x % 2 == 0}
-+
-+# Fizz Buzz
-+x = ['FizzBuzz' if i % 3 == 0 and i % 5 == 0 else 'Fizz' if i % 3 == 0 else 'Buzz' if i % 5 == 0 else i for i in
-+     range(1, 20)]
-+
-+# Palindrome
-+text = 'level'
-+ispalindrome = text == text[::-1]
-+print(ispalindrome)
-+
-+# Space Separated integers to a List
-+lis = list(map(int, input().split()))
-+print(lis)
-+
-+# Lambda Function
-+sqr = lambda x: x * x  ##Function that returns square of any number
-+print(sqr(10))
-+
-+# To Check The Existence of a number in a list
-+num = 5
-+if num in [1, 2, 3, 4, 5]:
-+    print('present')
-+
-+# Printing Patterns
-+n = 5
-+print('\n'.join('ðŸ˜€' * i for i in range(1, n + 1)))
-+
-+# Finding Factorial
-+import math
-+
-+n = 6
-+math.factorial(n)
-+
-+# Fibonacci Series
-+fibo = [0, 1]
-+[fibo.append(fibo[-2] + fibo[-1]) for i in range(5)]
-+print(fibo)
-+
-+# Prime Number
-+x = list(filter(lambda x: all(x % y != 0 for y in range(2, x)), range(2, 13)))
-+
-+# Finding Max Number
-+findmax = lambda x, y: x if x > y else y
-+findmax(5, 14)
-+
-+
-+# Linear Algebra
-+def scale(lst, x): return [i * x for i in lst]
-+
-+
-+scale([2, 3, 4], 2)
-+
-+# Transpose of a matrix
-+a = [[1, 2, 3],
-+     [4, 5, 6],
-+     [7, 8, 9]]
-+transpose = [list(i) for i in zip(*a)]
-+print(transpose)
-+
-+# Counting occurrence of a pattern
-+import re
-+
-+len(re.findall('python', 'python is a programming language. python is python.'))
-+
-+# Replacing a text with some other text
-+x = "python is a programming language.python is python".replace("python", 'Java')
-+
-+# Simulating Toss of a coin
-+import random
-+
-+random.choice(['Head', "Tail"])
-+
-+# Generating Groups
-+groups = [(a, b) for a in ['a', 'b'] for b in [1, 2, 3]]
-+print(groups)
-+
-+#
-Index: Algorithm/swap.py
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>def swapPossition(list, pos1, pos2):\r\n    list[pos1], list[pos2] = list[pos2], list[pos1]\r\n    return list\r\n\r\n\r\nlist = [20, 43, 24, 56, 76, 42]\r\npos1, pos2 = 1, 4\r\n\r\nresult = swapPossition(list, pos1 - 1, pos2 - 1)\r\nprint(result)\r\n\r\n\r\n######################################################################\r\n\r\ndef swapPositions(list, pos1, pos2):\r\n    first_ele = list.pop(pos1)\r\n    second_ele = list.pop(pos2 - 1)\r\n\r\n    list.insert(pos1, second_ele)\r\n    list.insert(pos2, first_ele)\r\n\r\n    return list\r\n\r\n\r\nList = [23, 65, 19, 90]\r\npos1, pos2 = 1, 3\r\n\r\nprint(swapPositions(List, pos1 - 1, pos2 - 1))\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/Algorithm/swap.py b/Algorithm/swap.py
---- a/Algorithm/swap.py	(revision 78caef508ee6b11b9d96b11934304396a82c0028)
-+++ b/Algorithm/swap.py	(date 1624731514644)
-@@ -16,6 +16,7 @@
-     first_ele = list.pop(pos1)
-     second_ele = list.pop(pos2 - 1)
- 
-+
-     list.insert(pos1, second_ele)
-     list.insert(pos2, first_ele)
- 
-Index: Python Basic/vowels count.py
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>from string import punctuation\r\nimport time\r\nfrom datetime import datetime\r\n\r\nvowels = 'aeiou' # This is Vowels character\r\ntext = 'Hello every one my name is abu bakkar siddik. i am from bangladesh. i am studing as a software engineer under daffodil international university. my dreame so long and may Allah full fill my dreams'\r\ntext = text.casefold()\r\ncount = {}.fromkeys(vowels, 0)\r\n\r\ncons = {}\r\n\r\nfor char in text:\r\n    if char in count:\r\n        count[char] += 1\r\n    else:\r\n        cons[char] = cons.get(char, 0)+1\r\nprint(count)\r\nprint(cons)\r\n\r\n# simple code for remove punctuation character\r\ndata = {}\r\nfor i, j in cons.items():\r\n    if i in punctuation:\r\n        continue\r\n    if i == ' ':\r\n        continue\r\n    else:\r\n        data[i] = j\r\n\r\nprint('\\n<<<<<<<<<<This the clear item count after processing data>>>>>>>>>>')\r\nprint(data)\r\n\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/Python Basic/vowels count.py b/Python Basic/vowels count.py
---- a/Python Basic/vowels count.py	(revision 78caef508ee6b11b9d96b11934304396a82c0028)
-+++ b/Python Basic/vowels count.py	(date 1626073025778)
-@@ -14,8 +14,10 @@
-         count[char] += 1
-     else:
-         cons[char] = cons.get(char, 0)+1
--print(count)
--print(cons)
-+
-+print(f'The Vowels is : {count}', end=" ")
-+print("")
-+print(f'The cosonents is : {cons}', end=" ")
- 
- # simple code for remove punctuation character
- data = {}
-Index: .idea/csv-plugin.xml
-===================================================================
-diff --git a/.idea/csv-plugin.xml b/.idea/csv-plugin.xml
-deleted file mode 100644
---- a/.idea/csv-plugin.xml	(revision 78caef508ee6b11b9d96b11934304396a82c0028)
-+++ /dev/null	(revision 78caef508ee6b11b9d96b11934304396a82c0028)
-@@ -1,58 +0,0 @@
--<?xml version="1.0" encoding="UTF-8"?>
--<project version="4">
--  <component name="CsvFileAttributes">
--    <option name="attributeMap">
--      <map>
--        <entry key="\API\Spech_to_Shutdown.py">
--          <value>
--            <Attribute>
--              <option name="separator" value=":" />
--            </Attribute>
--          </value>
--        </entry>
--        <entry key="\Algorithm\merge_sort.py">
--          <value>
--            <Attribute>
--              <option name="separator" value=":" />
--            </Attribute>
--          </value>
--        </entry>
--        <entry key="\Algorithm\swap.py">
--          <value>
--            <Attribute>
--              <option name="separator" value="," />
--            </Attribute>
--          </value>
--        </entry>
--        <entry key="\GeoPy\GeoCoder.py">
--          <value>
--            <Attribute>
--              <option name="separator" value="," />
--            </Attribute>
--          </value>
--        </entry>
--        <entry key="\OOP\Function Trick\Trick.py">
--          <value>
--            <Attribute>
--              <option name="separator" value="," />
--            </Attribute>
--          </value>
--        </entry>
--        <entry key="\Python Basic\PasswordGuessing.py">
--          <value>
--            <Attribute>
--              <option name="separator" value=":" />
--            </Attribute>
--          </value>
--        </entry>
--        <entry key="\Python Essential\20 Essential Python code.py">
--          <value>
--            <Attribute>
--              <option name="separator" value="," />
--            </Attribute>
--          </value>
--        </entry>
--      </map>
--    </option>
--  </component>
--</project>
-\ No newline at end of file
-Index: .idea/markdown-navigator.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"MarkdownProjectSettings\">\r\n    <PreviewSettings splitEditorLayout=\"SPLIT\" splitEditorPreview=\"PREVIEW\" useGrayscaleRendering=\"false\" zoomFactor=\"1.0\" maxImageWidth=\"0\" synchronizePreviewPosition=\"true\" highlightPreviewType=\"LINE\" highlightFadeOut=\"5\" highlightOnTyping=\"true\" synchronizeSourcePosition=\"true\" verticallyAlignSourceAndPreviewSyncPosition=\"true\" showSearchHighlightsInPreview=\"true\" showSelectionInPreview=\"true\" lastLayoutSetsDefault=\"false\">\r\n      <PanelProvider>\r\n        <provider providerId=\"com.vladsch.md.nav.editor.swing.html.panel\" providerName=\"Default - Swing\" />\r\n      </PanelProvider>\r\n    </PreviewSettings>\r\n    <ParserSettings gitHubSyntaxChange=\"false\" correctedInvalidSettings=\"false\" emojiShortcuts=\"1\" emojiImages=\"0\">\r\n      <PegdownExtensions>\r\n        <option name=\"ATXHEADERSPACE\" value=\"true\" />\r\n        <option name=\"FENCED_CODE_BLOCKS\" value=\"true\" />\r\n        <option name=\"INTELLIJ_DUMMY_IDENTIFIER\" value=\"true\" />\r\n        <option name=\"RELAXEDHRULES\" value=\"true\" />\r\n        <option name=\"STRIKETHROUGH\" value=\"true\" />\r\n        <option name=\"TABLES\" value=\"true\" />\r\n        <option name=\"TASKLISTITEMS\" value=\"true\" />\r\n      </PegdownExtensions>\r\n      <ParserOptions>\r\n        <option name=\"COMMONMARK_LISTS\" value=\"true\" />\r\n        <option name=\"EMOJI_SHORTCUTS\" value=\"true\" />\r\n        <option name=\"GFM_TABLE_RENDERING\" value=\"true\" />\r\n        <option name=\"PRODUCTION_SPEC_PARSER\" value=\"true\" />\r\n        <option name=\"SIM_TOC_BLANK_LINE_SPACER\" value=\"true\" />\r\n      </ParserOptions>\r\n    </ParserSettings>\r\n    <HtmlSettings headerTopEnabled=\"false\" headerBottomEnabled=\"false\" bodyTopEnabled=\"false\" bodyBottomEnabled=\"false\" addPageHeader=\"false\" addAnchorLinks=\"true\" anchorLinksWrapText=\"false\" imageUriSerials=\"false\" addDocTypeHtml=\"true\" noParaTags=\"false\" defaultUrlTitle=\"false\" migratedPlantUml=\"false\" migratedAnchorLinks=\"false\" plantUmlConversion=\"0\">\r\n      <GeneratorProvider>\r\n        <provider providerId=\"com.vladsch.md.nav.editor.text.html.generator\" providerName=\"Unmodified HTML Generator\" />\r\n      </GeneratorProvider>\r\n      <headerTop />\r\n      <headerBottom />\r\n      <bodyTop />\r\n      <bodyBottom />\r\n      <fencedCodeConversions />\r\n    </HtmlSettings>\r\n    <CssSettings previewScheme=\"UI_SCHEME\" cssUri=\"\" isCssUriEnabled=\"false\" isCssUriSerial=\"true\" isCssTextEnabled=\"false\" isDynamicPageWidth=\"true\">\r\n      <StylesheetProvider>\r\n        <provider providerId=\"com.vladsch.md.nav.editor.text.html.css\" providerName=\"No Stylesheet\" />\r\n      </StylesheetProvider>\r\n      <ScriptProviders />\r\n      <cssText />\r\n      <cssUriHistory />\r\n    </CssSettings>\r\n  </component>\r\n</project>
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/markdown-navigator.xml b/.idea/markdown-navigator.xml
---- a/.idea/markdown-navigator.xml	(revision 78caef508ee6b11b9d96b11934304396a82c0028)
-+++ b/.idea/markdown-navigator.xml	(date 1619588583447)
-@@ -24,7 +24,7 @@
-         <option name="SIM_TOC_BLANK_LINE_SPACER" value="true" />
-       </ParserOptions>
-     </ParserSettings>
--    <HtmlSettings headerTopEnabled="false" headerBottomEnabled="false" bodyTopEnabled="false" bodyBottomEnabled="false" addPageHeader="false" addAnchorLinks="true" anchorLinksWrapText="false" imageUriSerials="false" addDocTypeHtml="true" noParaTags="false" defaultUrlTitle="false" migratedPlantUml="false" migratedAnchorLinks="false" plantUmlConversion="0">
-+    <HtmlSettings headerTopEnabled="false" headerBottomEnabled="false" bodyTopEnabled="false" bodyBottomEnabled="false" addPageHeader="false" addAnchorLinks="false" anchorLinksWrapText="false" imageUriSerials="false" addDocTypeHtml="true" noParaTags="false" defaultUrlTitle="false" migratedPlantUml="true" migratedAnchorLinks="true" plantUmlConversion="0">
-       <GeneratorProvider>
-         <provider providerId="com.vladsch.md.nav.editor.text.html.generator" providerName="Unmodified HTML Generator" />
-       </GeneratorProvider>
-@@ -32,7 +32,23 @@
-       <headerBottom />
-       <bodyTop />
-       <bodyBottom />
--      <fencedCodeConversions />
-+      <fencedCodeConversions>
-+        <option name="c4plantuml" value="NONE" />
-+        <option name="ditaa" value="NONE" />
-+        <option name="erd" value="NONE" />
-+        <option name="graphviz" value="NONE" />
-+        <option name="latex" value="KATEX" />
-+        <option name="math" value="KATEX" />
-+        <option name="mermaid" value="NONE" />
-+        <option name="nomnoml" value="NONE" />
-+        <option name="plantuml" value="NONE" />
-+        <option name="puml" value="NONE" />
-+        <option name="svgbob" value="NONE" />
-+        <option name="umlet" value="NONE" />
-+        <option name="vega" value="NONE" />
-+        <option name="vegalite" value="NONE" />
-+        <option name="wavedrom" value="NONE" />
-+      </fencedCodeConversions>
-     </HtmlSettings>
-     <CssSettings previewScheme="UI_SCHEME" cssUri="" isCssUriEnabled="false" isCssUriSerial="true" isCssTextEnabled="false" isDynamicPageWidth="true">
-       <StylesheetProvider>
-Index: Python Basic/dictionary.py
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>def main():\r\n    game = {'rock': 'pock', 'papper': 'speark', 'popular': 'Python'}\r\n    # for k in game.keys():\r\n    #     print(k)\r\n\r\n    # for k in game.values():\r\n    #     print(k)\r\n\r\n    game['yang'] = 'Olee'\r\n    print_list(game)\r\n\r\n\r\ndef print_list(list):\r\n    for i in list:\r\n        print(f'{i}: {list[i]}')\r\n    print()\r\n\r\n\r\nif __name__ ==\"__main__\":\r\n    main()
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/Python Basic/dictionary.py b/Python Basic/dictionary.py
---- a/Python Basic/dictionary.py	(revision 78caef508ee6b11b9d96b11934304396a82c0028)
-+++ b/Python Basic/dictionary.py	(date 1619866098038)
-@@ -16,5 +16,5 @@
-     print()
- 
- 
--if __name__ =="__main__":
--    main()
-\ No newline at end of file
-+if __name__ == "__main__":
-+    main()
Index: .idea/shelf/Uncommitted_changes_before_Update_at_3_1_2022_12_22_PM/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_3_1_2022_12_22_PM/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_3_1_2022_12_22_PM/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_3_1_2022_12_22_PM/shelved.patch	(revision 48100aa5f760e5fc65be50c88a24a6e6332bda21)
+++ /dev/null	(revision 48100aa5f760e5fc65be50c88a24a6e6332bda21)
@@ -1,494 +0,0 @@
-Index: utestfile/map.py
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+># Map Function working with calculate the Celcius to Fahrenheit\r\nimport json\r\n\r\n# temps = [(\"berlin\", 35), (\"germany\", 50), (\"england\", 41), (\"Dhaka\", 26), (\"France\", 10)]\r\n# c_to_f = lambda data: (data[0], round((9 / 5) * data[1] + 32, 2));\r\n# result = map(c_to_f, temps)\r\n# a = dict(result)\r\n# print(json.dumps(a, indent=4))\r\n#\r\n# # List Comprehension is a concise way to create a list.\r\n# # It consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses.\r\n# # The expression is evaluated once for each item in the list that will be returned.\r\n# A = [1, 2, 3, 4]\r\n# B = [5, 6, 7, 8]\r\n# com = [(i, j) for i in A for j in B]\r\n#\r\n# import time\r\n#\r\n#\r\n# def count_item(number):\r\n#     print(\"Counting\", end=\"\", flush=True)\r\n#     num = 0\r\n#     for i in number:\r\n#         num += 1\r\n#         time.sleep(1)\r\n#         print(\".\", end=\" \", flush=True)\r\n#     print(f\"\\nTotal Number of Items: {num}\")\r\n#     return num\r\n\r\n# family = {\r\n#     \"member1\": {\r\n#         \"Name\": \"Ajay\",\r\n#         \"Age\": 59,\r\n#         \"Occupation\": {\r\n#             \"Occupation\": \"Software Engineer\",\r\n#             \"score\": [1, 2, 4],\r\n#         },\r\n#         \"Relation\": \"Dad\"\r\n#     }\r\n# }\r\n#\r\n# print(family)  # Accessing parent dictionary\r\n#\r\n# print(\"\\n\\n\", family[\"member1\"])  # Accessing child dictionary\r\n#\r\n# print(\"\\n\\n\", family[\"member1\"][\"Occupation\"][\"score\"][2])  # Accessing child dictionary key\r\n\r\nfrom enum import IntEnum, unique, auto, Enum\r\nclass Country(IntEnum):\r\n    Afghanistan = 93\r\n    Albania = 355\r\n    Algeria = 213\r\n    Andorra = 376\r\n    Angola = 244\r\n    Antarctica = 672\r\ncountry_code_list = list(map(int, Country))\r\nprint(country_code_list)\r\n\r\n@unique\r\nclass Color(Enum):\r\n    RED = 1\r\n    GREEN = 2\r\n    BLUE = 3\r\n\r\n\r\ne_valu_list = [myenum.value for myenum in Color]\r\nprint('enum values:', e_valu_list)\r\nprint (\"The enum member as a string is :\\n \",end=\"\")\r\nprint (Color.GREEN.value)\r\nprint (Color.RED.name)\r\nprint(isinstance(Color.GREEN, Color))\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/utestfile/map.py b/utestfile/map.py
---- a/utestfile/map.py	(revision a41e2489e5f6608f754b37f7da8b437e844e7c5c)
-+++ b/utestfile/map.py	(date 1646115695637)
-@@ -1,5 +1,4 @@
- # Map Function working with calculate the Celcius to Fahrenheit
--import json
- 
- # temps = [("berlin", 35), ("germany", 50), ("england", 41), ("Dhaka", 26), ("France", 10)]
- # c_to_f = lambda data: (data[0], round((9 / 5) * data[1] + 32, 2));
-@@ -45,7 +44,9 @@
- #
- # print("\n\n", family["member1"]["Occupation"]["score"][2])  # Accessing child dictionary key
- 
--from enum import IntEnum, unique, auto, Enum
-+from enum import IntEnum, unique, Enum
-+
-+
- class Country(IntEnum):
-     Afghanistan = 93
-     Albania = 355
-@@ -53,9 +54,12 @@
-     Andorra = 376
-     Angola = 244
-     Antarctica = 672
-+
-+
- country_code_list = list(map(int, Country))
- print(country_code_list)
- 
-+
- @unique
- class Color(Enum):
-     RED = 1
-@@ -65,8 +69,7 @@
- 
- e_valu_list = [myenum.value for myenum in Color]
- print('enum values:', e_valu_list)
--print ("The enum member as a string is :\n ",end="")
--print (Color.GREEN.value)
--print (Color.RED.name)
-+print("The enum member as a string is :\n ", end="")
-+print(Color.GREEN.value)
-+print(Color.RED.name)
- print(isinstance(Color.GREEN, Color))
--
-Index: utestfile/test/HTMLTestRunner.py
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>\"\"\"\r\nA TestRunner for use with the Python unit testing framework. It\r\ngenerates a HTML report to show the result at a glance.\r\n\r\nThe simplest way to use this is to invoke its main method. E.g.\r\n\r\n    import unittest\r\n    import HTMLTestRunner\r\n\r\n    ... define your tests ...\r\n\r\n    if __name__ == '__main__':\r\n        HTMLTestRunner.main()\r\n\r\n\r\nFor more customization options, instantiates a HTMLTestRunner object.\r\nHTMLTestRunner is a counterpart to unittest's TextTestRunner. E.g.\r\n\r\n    # output to a file\r\n    fp = file('my_report.html', 'wb')\r\n    runner = HTMLTestRunner.HTMLTestRunner(\r\n                stream=fp,\r\n                title='My unit test',\r\n                description='This demonstrates the report output by HTMLTestRunner.'\r\n                )\r\n\r\n    # Use an external stylesheet.\r\n    # See the Template_mixin class for more customizable options\r\n    runner.STYLESHEET_TMPL = '<link rel=\"stylesheet\" href=\"my_stylesheet.css\" type=\"text/css\">'\r\n\r\n    # run the test\r\n    runner.run(my_test_suite)\r\n\r\n\r\n------------------------------------------------------------------------\r\nCopyright (c) 2004-2007, Wai Yip Tung\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are\r\nmet:\r\n\r\n* Redistributions of source code must retain the above copyright notice,\r\n  this list of conditions and the following disclaimer.\r\n* Redistributions in binary form must reproduce the above copyright\r\n  notice, this list of conditions and the following disclaimer in the\r\n  documentation and/or other materials provided with the distribution.\r\n* Neither the name Wai Yip Tung nor the names of its contributors may be\r\n  used to endorse or promote products derived from this software without\r\n  specific prior written permission.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\r\nIS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\r\nTO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\r\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER\r\nOR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\r\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\"\"\"\r\n\r\n# URL: http://tungwaiyip.info/software/HTMLTestRunner.html\r\n\r\n__author__ = \"Wai Yip Tung\"\r\n__version__ = \"0.8.2\"\r\n\r\n\r\n\"\"\"\r\nChange History\r\n\r\nVersion 0.8.2\r\n* Show output inline instead of popup window (Viorel Lupu).\r\n\r\nVersion in 0.8.1\r\n* Validated XHTML (Wolfgang Borgert).\r\n* Added description of test classes and test cases.\r\n\r\nVersion in 0.8.0\r\n* Define Template_mixin class for customization.\r\n* Workaround a IE 6 bug that it does not treat <script> block as CDATA.\r\n\r\nVersion in 0.7.1\r\n* Back port to Python 2.3 (Frank Horowitz).\r\n* Fix missing scroll bars in detail log (Podi).\r\n\"\"\"\r\n\r\n# TODO: color stderr\r\n# TODO: simplify javascript using ,ore than 1 class in the class attribute?\r\n\r\nimport datetime\r\nimport StringIO\r\nimport sys\r\nimport time\r\nimport unittest\r\nfrom xml.sax import saxutils\r\n\r\n\r\n# ------------------------------------------------------------------------\r\n# The redirectors below are used to capture output during testing. Output\r\n# sent to sys.stdout and sys.stderr are automatically captured. However\r\n# in some cases sys.stdout is already cached before HTMLTestRunner is\r\n# invoked (e.g. calling logging.basicConfig). In order to capture those\r\n# output, use the redirectors for the cached stream.\r\n#\r\n# e.g.\r\n#   >>> logging.basicConfig(stream=HTMLTestRunner.stdout_redirector)\r\n#   >>>\r\n\r\nclass OutputRedirector(object):\r\n    \"\"\" Wrapper to redirect stdout or stderr \"\"\"\r\n    def __init__(self, fp):\r\n        self.fp = fp\r\n\r\n    def write(self, s):\r\n        self.fp.write(s)\r\n\r\n    def writelines(self, lines):\r\n        self.fp.writelines(lines)\r\n\r\n    def flush(self):\r\n        self.fp.flush()\r\n\r\nstdout_redirector = OutputRedirector(sys.stdout)\r\nstderr_redirector = OutputRedirector(sys.stderr)\r\n\r\n\r\n\r\n# ----------------------------------------------------------------------\r\n# Template\r\n\r\nclass Template_mixin(object):\r\n    \"\"\"\r\n    Define a HTML template for report customerization and generation.\r\n\r\n    Overall structure of an HTML report\r\n\r\n    HTML\r\n    +------------------------+\r\n    |<html>                  |\r\n    |  <head>                |\r\n    |                        |\r\n    |   STYLESHEET           |\r\n    |   +----------------+   |\r\n    |   |                |   |\r\n    |   +----------------+   |\r\n    |                        |\r\n    |  </head>               |\r\n    |                        |\r\n    |  <body>                |\r\n    |                        |\r\n    |   HEADING              |\r\n    |   +----------------+   |\r\n    |   |                |   |\r\n    |   +----------------+   |\r\n    |                        |\r\n    |   REPORT               |\r\n    |   +----------------+   |\r\n    |   |                |   |\r\n    |   +----------------+   |\r\n    |                        |\r\n    |   ENDING               |\r\n    |   +----------------+   |\r\n    |   |                |   |\r\n    |   +----------------+   |\r\n    |                        |\r\n    |  </body>               |\r\n    |</html>                 |\r\n    +------------------------+\r\n    \"\"\"\r\n\r\n    STATUS = {\r\n    0: 'pass',\r\n    1: 'fail',\r\n    2: 'error',\r\n    }\r\n\r\n    DEFAULT_TITLE = 'Unit Test Report'\r\n    DEFAULT_DESCRIPTION = ''\r\n\r\n    # ------------------------------------------------------------------------\r\n    # HTML Template\r\n\r\n    HTML_TMPL = r\"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n<head>\r\n    <title>%(title)s</title>\r\n    <meta name=\"generator\" content=\"%(generator)s\"/>\r\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\r\n    %(stylesheet)s\r\n</head>\r\n<body>\r\n<script language=\"javascript\" type=\"text/javascript\"><!--\r\noutput_list = Array();\r\n\r\n/* level - 0:Summary; 1:Failed; 2:All */\r\nfunction showCase(level) {\r\n    trs = document.getElementsByTagName(\"tr\");\r\n    for (var i = 0; i < trs.length; i++) {\r\n        tr = trs[i];\r\n        id = tr.id;\r\n        if (id.substr(0,2) == 'ft') {\r\n            if (level < 1) {\r\n                tr.className = 'hiddenRow';\r\n            }\r\n            else {\r\n                tr.className = '';\r\n            }\r\n        }\r\n        if (id.substr(0,2) == 'pt') {\r\n            if (level > 1) {\r\n                tr.className = '';\r\n            }\r\n            else {\r\n                tr.className = 'hiddenRow';\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction showClassDetail(cid, count) {\r\n    var id_list = Array(count);\r\n    var toHide = 1;\r\n    for (var i = 0; i < count; i++) {\r\n        tid0 = 't' + cid.substr(1) + '.' + (i+1);\r\n        tid = 'f' + tid0;\r\n        tr = document.getElementById(tid);\r\n        if (!tr) {\r\n            tid = 'p' + tid0;\r\n            tr = document.getElementById(tid);\r\n        }\r\n        id_list[i] = tid;\r\n        if (tr.className) {\r\n            toHide = 0;\r\n        }\r\n    }\r\n    for (var i = 0; i < count; i++) {\r\n        tid = id_list[i];\r\n        if (toHide) {\r\n            document.getElementById('div_'+tid).style.display = 'none'\r\n            document.getElementById(tid).className = 'hiddenRow';\r\n        }\r\n        else {\r\n            document.getElementById(tid).className = '';\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction showTestDetail(div_id){\r\n    var details_div = document.getElementById(div_id)\r\n    var displayState = details_div.style.display\r\n    // alert(displayState)\r\n    if (displayState != 'block' ) {\r\n        displayState = 'block'\r\n        details_div.style.display = 'block'\r\n    }\r\n    else {\r\n        details_div.style.display = 'none'\r\n    }\r\n}\r\n\r\n\r\nfunction html_escape(s) {\r\n    s = s.replace(/&/g,'&amp;');\r\n    s = s.replace(/</g,'&lt;');\r\n    s = s.replace(/>/g,'&gt;');\r\n    return s;\r\n}\r\n\r\n/* obsoleted by detail in <div>\r\nfunction showOutput(id, name) {\r\n    var w = window.open(\"\", //url\r\n                    name,\r\n                    \"resizable,scrollbars,status,width=800,height=450\");\r\n    d = w.document;\r\n    d.write(\"<pre>\");\r\n    d.write(html_escape(output_list[id]));\r\n    d.write(\"\\n\");\r\n    d.write(\"<a href='javascript:window.close()'>close</a>\\n\");\r\n    d.write(\"</pre>\\n\");\r\n    d.close();\r\n}\r\n*/\r\n--></script>\r\n\r\n%(heading)s\r\n%(report)s\r\n%(ending)s\r\n\r\n</body>\r\n</html>\r\n\"\"\"\r\n    # variables: (title, generator, stylesheet, heading, report, ending)\r\n\r\n\r\n    # ------------------------------------------------------------------------\r\n    # Stylesheet\r\n    #\r\n    # alternatively use a <link> for external style sheet, e.g.\r\n    #   <link rel=\"stylesheet\" href=\"$url\" type=\"text/css\">\r\n\r\n    STYLESHEET_TMPL = \"\"\"\r\n<style type=\"text/css\" media=\"screen\">\r\nbody        { font-family: verdana, arial, helvetica, sans-serif; font-size: 80%; }\r\ntable       { font-size: 100%; }\r\npre         { }\r\n\r\n/* -- heading ---------------------------------------------------------------------- */\r\nh1 {\r\n\tfont-size: 16pt;\r\n\tcolor: gray;\r\n}\r\n.heading {\r\n    margin-top: 0ex;\r\n    margin-bottom: 1ex;\r\n}\r\n\r\n.heading .attribute {\r\n    margin-top: 1ex;\r\n    margin-bottom: 0;\r\n}\r\n\r\n.heading .description {\r\n    margin-top: 4ex;\r\n    margin-bottom: 6ex;\r\n}\r\n\r\n/* -- css div popup ------------------------------------------------------------------------ */\r\na.popup_link {\r\n}\r\n\r\na.popup_link:hover {\r\n    color: red;\r\n}\r\n\r\n.popup_window {\r\n    display: none;\r\n    position: relative;\r\n    left: 0px;\r\n    top: 0px;\r\n    /*border: solid #627173 1px; */\r\n    padding: 10px;\r\n    background-color: #E6E6D6;\r\n    font-family: \"Lucida Console\", \"Courier New\", Courier, monospace;\r\n    text-align: left;\r\n    font-size: 8pt;\r\n    width: 500px;\r\n}\r\n\r\n}\r\n/* -- report ------------------------------------------------------------------------ */\r\n#show_detail_line {\r\n    margin-top: 3ex;\r\n    margin-bottom: 1ex;\r\n}\r\n#result_table {\r\n    width: 80%;\r\n    border-collapse: collapse;\r\n    border: 1px solid #777;\r\n}\r\n#header_row {\r\n    font-weight: bold;\r\n    color: white;\r\n    background-color: #777;\r\n}\r\n#result_table td {\r\n    border: 1px solid #777;\r\n    padding: 2px;\r\n}\r\n#total_row  { font-weight: bold; }\r\n.passClass  { background-color: #6c6; }\r\n.failClass  { background-color: #c60; }\r\n.errorClass { background-color: #c00; }\r\n.passCase   { color: #6c6; }\r\n.failCase   { color: #c60; font-weight: bold; }\r\n.errorCase  { color: #c00; font-weight: bold; }\r\n.hiddenRow  { display: none; }\r\n.testcase   { margin-left: 2em; }\r\n\r\n\r\n/* -- ending ---------------------------------------------------------------------- */\r\n#ending {\r\n}\r\n\r\n</style>\r\n\"\"\"\r\n\r\n\r\n\r\n    # ------------------------------------------------------------------------\r\n    # Heading\r\n    #\r\n\r\n    HEADING_TMPL = \"\"\"<div class='heading'>\r\n<h1>%(title)s</h1>\r\n%(parameters)s\r\n<p class='description'>%(description)s</p>\r\n</div>\r\n\r\n\"\"\" # variables: (title, parameters, description)\r\n\r\n    HEADING_ATTRIBUTE_TMPL = \"\"\"<p class='attribute'><strong>%(name)s:</strong> %(value)s</p>\r\n\"\"\" # variables: (name, value)\r\n\r\n\r\n\r\n    # ------------------------------------------------------------------------\r\n    # Report\r\n    #\r\n\r\n    REPORT_TMPL = \"\"\"\r\n<p id='show_detail_line'>Show\r\n<a href='javascript:showCase(0)'>Summary</a>\r\n<a href='javascript:showCase(1)'>Failed</a>\r\n<a href='javascript:showCase(2)'>All</a>\r\n</p>\r\n<table id='result_table'>\r\n<colgroup>\r\n<col align='left' />\r\n<col align='right' />\r\n<col align='right' />\r\n<col align='right' />\r\n<col align='right' />\r\n<col align='right' />\r\n</colgroup>\r\n<tr id='header_row'>\r\n    <td>Test Group/Test case</td>\r\n    <td>Count</td>\r\n    <td>Pass</td>\r\n    <td>Fail</td>\r\n    <td>Error</td>\r\n    <td>View</td>\r\n</tr>\r\n%(test_list)s\r\n<tr id='total_row'>\r\n    <td>Total</td>\r\n    <td>%(count)s</td>\r\n    <td>%(Pass)s</td>\r\n    <td>%(fail)s</td>\r\n    <td>%(error)s</td>\r\n    <td>&nbsp;</td>\r\n</tr>\r\n</table>\r\n\"\"\" # variables: (test_list, count, Pass, fail, error)\r\n\r\n    REPORT_CLASS_TMPL = r\"\"\"\r\n<tr class='%(style)s'>\r\n    <td>%(desc)s</td>\r\n    <td>%(count)s</td>\r\n    <td>%(Pass)s</td>\r\n    <td>%(fail)s</td>\r\n    <td>%(error)s</td>\r\n    <td><a href=\"javascript:showClassDetail('%(cid)s',%(count)s)\">Detail</a></td>\r\n</tr>\r\n\"\"\" # variables: (style, desc, count, Pass, fail, error, cid)\r\n\r\n\r\n    REPORT_TEST_WITH_OUTPUT_TMPL = r\"\"\"\r\n<tr id='%(tid)s' class='%(Class)s'>\r\n    <td class='%(style)s'><div class='testcase'>%(desc)s</div></td>\r\n    <td colspan='5' align='center'>\r\n\r\n    <!--css div popup start-->\r\n    <a class=\"popup_link\" onfocus='this.blur();' href=\"javascript:showTestDetail('div_%(tid)s')\" >\r\n        %(status)s</a>\r\n\r\n    <div id='div_%(tid)s' class=\"popup_window\">\r\n        <div style='text-align: right; color:red;cursor:pointer'>\r\n        <a onfocus='this.blur();' onclick=\"document.getElementById('div_%(tid)s').style.display = 'none' \" >\r\n           [x]</a>\r\n        </div>\r\n        <pre>\r\n        %(script)s\r\n        </pre>\r\n    </div>\r\n    <!--css div popup end-->\r\n\r\n    </td>\r\n</tr>\r\n\"\"\" # variables: (tid, Class, style, desc, status)\r\n\r\n\r\n    REPORT_TEST_NO_OUTPUT_TMPL = r\"\"\"\r\n<tr id='%(tid)s' class='%(Class)s'>\r\n    <td class='%(style)s'><div class='testcase'>%(desc)s</div></td>\r\n    <td colspan='5' align='center'>%(status)s</td>\r\n</tr>\r\n\"\"\" # variables: (tid, Class, style, desc, status)\r\n\r\n\r\n    REPORT_TEST_OUTPUT_TMPL = r\"\"\"\r\n%(id)s: %(output)s\r\n\"\"\" # variables: (id, output)\r\n\r\n\r\n\r\n    # ------------------------------------------------------------------------\r\n    # ENDING\r\n    #\r\n\r\n    ENDING_TMPL = \"\"\"<div id='ending'>&nbsp;</div>\"\"\"\r\n\r\n# -------------------- The end of the Template class -------------------\r\n\r\n\r\nTestResult = unittest.TestResult\r\n\r\nclass _TestResult(TestResult):\r\n    # note: _TestResult is a pure representation of results.\r\n    # It lacks the output and reporting ability compares to unittest._TextTestResult.\r\n\r\n    def __init__(self, verbosity=1):\r\n        TestResult.__init__(self)\r\n        self.stdout0 = None\r\n        self.stderr0 = None\r\n        self.success_count = 0\r\n        self.failure_count = 0\r\n        self.error_count = 0\r\n        self.verbosity = verbosity\r\n\r\n        # result is a list of result in 4 tuple\r\n        # (\r\n        #   result code (0: success; 1: fail; 2: error),\r\n        #   TestCase object,\r\n        #   Test output (byte string),\r\n        #   stack trace,\r\n        # )\r\n        self.result = []\r\n\r\n\r\n    def startTest(self, test):\r\n        TestResult.startTest(self, test)\r\n        # just one buffer for both stdout and stderr\r\n        self.outputBuffer = StringIO.StringIO()\r\n        stdout_redirector.fp = self.outputBuffer\r\n        stderr_redirector.fp = self.outputBuffer\r\n        self.stdout0 = sys.stdout\r\n        self.stderr0 = sys.stderr\r\n        sys.stdout = stdout_redirector\r\n        sys.stderr = stderr_redirector\r\n\r\n\r\n    def complete_output(self):\r\n        \"\"\"\r\n        Disconnect output redirection and return buffer.\r\n        Safe to call multiple times.\r\n        \"\"\"\r\n        if self.stdout0:\r\n            sys.stdout = self.stdout0\r\n            sys.stderr = self.stderr0\r\n            self.stdout0 = None\r\n            self.stderr0 = None\r\n        return self.outputBuffer.getvalue()\r\n\r\n\r\n    def stopTest(self, test):\r\n        # Usually one of addSuccess, addError or addFailure would have been called.\r\n        # But there are some path in unittest that would bypass this.\r\n        # We must disconnect stdout in stopTest(), which is guaranteed to be called.\r\n        self.complete_output()\r\n\r\n\r\n    def addSuccess(self, test):\r\n        self.success_count += 1\r\n        TestResult.addSuccess(self, test)\r\n        output = self.complete_output()\r\n        self.result.append((0, test, output, ''))\r\n        if self.verbosity > 1:\r\n            sys.stderr.write('ok ')\r\n            sys.stderr.write(str(test))\r\n            sys.stderr.write('\\n')\r\n        else:\r\n            sys.stderr.write('.')\r\n\r\n    def addError(self, test, err):\r\n        self.error_count += 1\r\n        TestResult.addError(self, test, err)\r\n        _, _exc_str = self.errors[-1]\r\n        output = self.complete_output()\r\n        self.result.append((2, test, output, _exc_str))\r\n        if self.verbosity > 1:\r\n            sys.stderr.write('E  ')\r\n            sys.stderr.write(str(test))\r\n            sys.stderr.write('\\n')\r\n        else:\r\n            sys.stderr.write('E')\r\n\r\n    def addFailure(self, test, err):\r\n        self.failure_count += 1\r\n        TestResult.addFailure(self, test, err)\r\n        _, _exc_str = self.failures[-1]\r\n        output = self.complete_output()\r\n        self.result.append((1, test, output, _exc_str))\r\n        if self.verbosity > 1:\r\n            sys.stderr.write('F  ')\r\n            sys.stderr.write(str(test))\r\n            sys.stderr.write('\\n')\r\n        else:\r\n            sys.stderr.write('F')\r\n\r\n\r\nclass HTMLTestRunner(Template_mixin):\r\n    \"\"\"\r\n    \"\"\"\r\n    def __init__(self, stream=sys.stdout, verbosity=1, title=None, description=None):\r\n        self.stream = stream\r\n        self.verbosity = verbosity\r\n        if title is None:\r\n            self.title = self.DEFAULT_TITLE\r\n        else:\r\n            self.title = title\r\n        if description is None:\r\n            self.description = self.DEFAULT_DESCRIPTION\r\n        else:\r\n            self.description = description\r\n\r\n        self.startTime = datetime.datetime.now()\r\n\r\n\r\n    def run(self, test):\r\n        \"Run the given test case or test suite.\"\r\n        result = _TestResult(self.verbosity)\r\n        test(result)\r\n        self.stopTime = datetime.datetime.now()\r\n        self.generateReport(test, result)\r\n        print >>sys.stderr, '\\nTime Elapsed: %s' % (self.stopTime-self.startTime)\r\n        return result\r\n\r\n\r\n    def sortResult(self, result_list):\r\n        # unittest does not seems to run in any particular order.\r\n        # Here at least we want to group them together by class.\r\n        rmap = {}\r\n        classes = []\r\n        for n,t,o,e in result_list:\r\n            cls = t.__class__\r\n            if not rmap.has_key(cls):\r\n                rmap[cls] = []\r\n                classes.append(cls)\r\n            rmap[cls].append((n,t,o,e))\r\n        r = [(cls, rmap[cls]) for cls in classes]\r\n        return r\r\n\r\n\r\n    def getReportAttributes(self, result):\r\n        \"\"\"\r\n        Return report attributes as a list of (name, value).\r\n        Override this to add custom attributes.\r\n        \"\"\"\r\n        startTime = str(self.startTime)[:19]\r\n        duration = str(self.stopTime - self.startTime)\r\n        status = []\r\n        if result.success_count: status.append('Pass %s'    % result.success_count)\r\n        if result.failure_count: status.append('Failure %s' % result.failure_count)\r\n        if result.error_count:   status.append('Error %s'   % result.error_count  )\r\n        if status:\r\n            status = ' '.join(status)\r\n        else:\r\n            status = 'none'\r\n        return [\r\n            ('Start Time', startTime),\r\n            ('Duration', duration),\r\n            ('Status', status),\r\n        ]\r\n\r\n\r\n    def generateReport(self, test, result):\r\n        report_attrs = self.getReportAttributes(result)\r\n        generator = 'HTMLTestRunner %s' % __version__\r\n        stylesheet = self._generate_stylesheet()\r\n        heading = self._generate_heading(report_attrs)\r\n        report = self._generate_report(result)\r\n        ending = self._generate_ending()\r\n        output = self.HTML_TMPL % dict(\r\n            title = saxutils.escape(self.title),\r\n            generator = generator,\r\n            stylesheet = stylesheet,\r\n            heading = heading,\r\n            report = report,\r\n            ending = ending,\r\n        )\r\n        self.stream.write(output.encode('utf8'))\r\n\r\n\r\n    def _generate_stylesheet(self):\r\n        return self.STYLESHEET_TMPL\r\n\r\n\r\n    def _generate_heading(self, report_attrs):\r\n        a_lines = []\r\n        for name, value in report_attrs:\r\n            line = self.HEADING_ATTRIBUTE_TMPL % dict(\r\n                    name = saxutils.escape(name),\r\n                    value = saxutils.escape(value),\r\n                )\r\n            a_lines.append(line)\r\n        heading = self.HEADING_TMPL % dict(\r\n            title = saxutils.escape(self.title),\r\n            parameters = ''.join(a_lines),\r\n            description = saxutils.escape(self.description),\r\n        )\r\n        return heading\r\n\r\n\r\n    def _generate_report(self, result):\r\n        rows = []\r\n        sortedResult = self.sortResult(result.result)\r\n        for cid, (cls, cls_results) in enumerate(sortedResult):\r\n            # subtotal for a class\r\n            np = nf = ne = 0\r\n            for n,t,o,e in cls_results:\r\n                if n == 0: np += 1\r\n                elif n == 1: nf += 1\r\n                else: ne += 1\r\n\r\n            # format class description\r\n            if cls.__module__ == \"__main__\":\r\n                name = cls.__name__\r\n            else:\r\n                name = \"%s.%s\" % (cls.__module__, cls.__name__)\r\n            doc = cls.__doc__ and cls.__doc__.split(\"\\n\")[0] or \"\"\r\n            desc = doc and '%s: %s' % (name, doc) or name\r\n\r\n            row = self.REPORT_CLASS_TMPL % dict(\r\n                style = ne > 0 and 'errorClass' or nf > 0 and 'failClass' or 'passClass',\r\n                desc = desc,\r\n                count = np+nf+ne,\r\n                Pass = np,\r\n                fail = nf,\r\n                error = ne,\r\n                cid = 'c%s' % (cid+1),\r\n            )\r\n            rows.append(row)\r\n\r\n            for tid, (n,t,o,e) in enumerate(cls_results):\r\n                self._generate_report_test(rows, cid, tid, n, t, o, e)\r\n\r\n        report = self.REPORT_TMPL % dict(\r\n            test_list = ''.join(rows),\r\n            count = str(result.success_count+result.failure_count+result.error_count),\r\n            Pass = str(result.success_count),\r\n            fail = str(result.failure_count),\r\n            error = str(result.error_count),\r\n        )\r\n        return report\r\n\r\n\r\n    def _generate_report_test(self, rows, cid, tid, n, t, o, e):\r\n        # e.g. 'pt1.1', 'ft1.1', etc\r\n        has_output = bool(o or e)\r\n        tid = (n == 0 and 'p' or 'f') + 't%s.%s' % (cid+1,tid+1)\r\n        name = t.id().split('.')[-1]\r\n        doc = t.shortDescription() or \"\"\r\n        desc = doc and ('%s: %s' % (name, doc)) or name\r\n        tmpl = has_output and self.REPORT_TEST_WITH_OUTPUT_TMPL or self.REPORT_TEST_NO_OUTPUT_TMPL\r\n\r\n        # o and e should be byte string because they are collected from stdout and stderr?\r\n        if isinstance(o,str):\r\n            # TODO: some problem with 'string_escape': it escape \\n and mess up formating\r\n            # uo = unicode(o.encode('string_escape'))\r\n            uo = o.decode('latin-1')\r\n        else:\r\n            uo = o\r\n        if isinstance(e,str):\r\n            # TODO: some problem with 'string_escape': it escape \\n and mess up formating\r\n            # ue = unicode(e.encode('string_escape'))\r\n            ue = e.decode('latin-1')\r\n        else:\r\n            ue = e\r\n\r\n        script = self.REPORT_TEST_OUTPUT_TMPL % dict(\r\n            id = tid,\r\n            output = saxutils.escape(uo+ue),\r\n        )\r\n\r\n        row = tmpl % dict(\r\n            tid = tid,\r\n            Class = (n == 0 and 'hiddenRow' or 'none'),\r\n            style = n == 2 and 'errorCase' or (n == 1 and 'failCase' or 'none'),\r\n            desc = desc,\r\n            script = script,\r\n            status = self.STATUS[n],\r\n        )\r\n        rows.append(row)\r\n        if not has_output:\r\n            return\r\n\r\n    def _generate_ending(self):\r\n        return self.ENDING_TMPL\r\n\r\n\r\n##############################################################################\r\n# Facilities for running tests from the command line\r\n##############################################################################\r\n\r\n# Note: Reuse unittest.TestProgram to launch test. In the future we may\r\n# build our own launcher to support more specific command line\r\n# parameters like test title, CSS, etc.\r\nclass TestProgram(unittest.TestProgram):\r\n    \"\"\"\r\n    A variation of the unittest.TestProgram. Please refer to the base\r\n    class for command line parameters.\r\n    \"\"\"\r\n    def runTests(self):\r\n        # Pick HTMLTestRunner as the default test runner.\r\n        # base class's testRunner parameter is not useful because it means\r\n        # we have to instantiate HTMLTestRunner before we know self.verbosity.\r\n        if self.testRunner is None:\r\n            self.testRunner = HTMLTestRunner(verbosity=self.verbosity)\r\n        unittest.TestProgram.runTests(self)\r\n\r\nmain = TestProgram\r\n\r\n##############################################################################\r\n# Executing this module from the command line\r\n##############################################################################\r\n\r\nif __name__ == \"__main__\":\r\n    main(module=None)\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/utestfile/test/HTMLTestRunner.py b/utestfile/test/HTMLTestRunner.py
---- a/utestfile/test/HTMLTestRunner.py	(revision a41e2489e5f6608f754b37f7da8b437e844e7c5c)
-+++ b/utestfile/test/HTMLTestRunner.py	(date 1646115695604)
-@@ -67,7 +67,6 @@
- __author__ = "Wai Yip Tung"
- __version__ = "0.8.2"
- 
--
- """
- Change History
- 
-@@ -91,12 +90,12 @@
- # TODO: simplify javascript using ,ore than 1 class in the class attribute?
- 
- import datetime
--import StringIO
- import sys
--import time
- import unittest
- from xml.sax import saxutils
- 
-+import StringIO
-+
- 
- # ------------------------------------------------------------------------
- # The redirectors below are used to capture output during testing. Output
-@@ -111,6 +110,7 @@
- 
- class OutputRedirector(object):
-     """ Wrapper to redirect stdout or stderr """
-+
-     def __init__(self, fp):
-         self.fp = fp
- 
-@@ -123,11 +123,11 @@
-     def flush(self):
-         self.fp.flush()
- 
-+
- stdout_redirector = OutputRedirector(sys.stdout)
- stderr_redirector = OutputRedirector(sys.stderr)
- 
- 
--
- # ----------------------------------------------------------------------
- # Template
- 
-@@ -172,9 +172,9 @@
-     """
- 
-     STATUS = {
--    0: 'pass',
--    1: 'fail',
--    2: 'error',
-+        0: 'pass',
-+        1: 'fail',
-+        2: 'error',
-     }
- 
-     DEFAULT_TITLE = 'Unit Test Report'
-@@ -297,7 +297,6 @@
- """
-     # variables: (title, generator, stylesheet, heading, report, ending)
- 
--
-     # ------------------------------------------------------------------------
-     # Stylesheet
-     #
-@@ -390,8 +389,6 @@
- </style>
- """
- 
--
--
-     # ------------------------------------------------------------------------
-     # Heading
-     #
-@@ -402,13 +399,11 @@
- <p class='description'>%(description)s</p>
- </div>
- 
--""" # variables: (title, parameters, description)
-+"""  # variables: (title, parameters, description)
- 
-     HEADING_ATTRIBUTE_TMPL = """<p class='attribute'><strong>%(name)s:</strong> %(value)s</p>
--""" # variables: (name, value)
-+"""  # variables: (name, value)
- 
--
--
-     # ------------------------------------------------------------------------
-     # Report
-     #
-@@ -446,7 +441,7 @@
-     <td>&nbsp;</td>
- </tr>
- </table>
--""" # variables: (test_list, count, Pass, fail, error)
-+"""  # variables: (test_list, count, Pass, fail, error)
- 
-     REPORT_CLASS_TMPL = r"""
- <tr class='%(style)s'>
-@@ -457,9 +452,8 @@
-     <td>%(error)s</td>
-     <td><a href="javascript:showClassDetail('%(cid)s',%(count)s)">Detail</a></td>
- </tr>
--""" # variables: (style, desc, count, Pass, fail, error, cid)
-+"""  # variables: (style, desc, count, Pass, fail, error, cid)
- 
--
-     REPORT_TEST_WITH_OUTPUT_TMPL = r"""
- <tr id='%(tid)s' class='%(Class)s'>
-     <td class='%(style)s'><div class='testcase'>%(desc)s</div></td>
-@@ -482,34 +476,32 @@
- 
-     </td>
- </tr>
--""" # variables: (tid, Class, style, desc, status)
-+"""  # variables: (tid, Class, style, desc, status)
- 
--
-     REPORT_TEST_NO_OUTPUT_TMPL = r"""
- <tr id='%(tid)s' class='%(Class)s'>
-     <td class='%(style)s'><div class='testcase'>%(desc)s</div></td>
-     <td colspan='5' align='center'>%(status)s</td>
- </tr>
--""" # variables: (tid, Class, style, desc, status)
-+"""  # variables: (tid, Class, style, desc, status)
- 
--
-     REPORT_TEST_OUTPUT_TMPL = r"""
- %(id)s: %(output)s
--""" # variables: (id, output)
-+"""  # variables: (id, output)
- 
--
--
-     # ------------------------------------------------------------------------
-     # ENDING
-     #
- 
-     ENDING_TMPL = """<div id='ending'>&nbsp;</div>"""
- 
-+
- # -------------------- The end of the Template class -------------------
- 
- 
- TestResult = unittest.TestResult
- 
-+
- class _TestResult(TestResult):
-     # note: _TestResult is a pure representation of results.
-     # It lacks the output and reporting ability compares to unittest._TextTestResult.
-@@ -532,7 +524,6 @@
-         # )
-         self.result = []
- 
--
-     def startTest(self, test):
-         TestResult.startTest(self, test)
-         # just one buffer for both stdout and stderr
-@@ -544,7 +535,6 @@
-         sys.stdout = stdout_redirector
-         sys.stderr = stderr_redirector
- 
--
-     def complete_output(self):
-         """
-         Disconnect output redirection and return buffer.
-@@ -557,14 +547,12 @@
-             self.stderr0 = None
-         return self.outputBuffer.getvalue()
- 
--
-     def stopTest(self, test):
-         # Usually one of addSuccess, addError or addFailure would have been called.
-         # But there are some path in unittest that would bypass this.
-         # We must disconnect stdout in stopTest(), which is guaranteed to be called.
-         self.complete_output()
- 
--
-     def addSuccess(self, test):
-         self.success_count += 1
-         TestResult.addSuccess(self, test)
-@@ -607,6 +595,7 @@
- class HTMLTestRunner(Template_mixin):
-     """
-     """
-+
-     def __init__(self, stream=sys.stdout, verbosity=1, title=None, description=None):
-         self.stream = stream
-         self.verbosity = verbosity
-@@ -621,32 +610,29 @@
- 
-         self.startTime = datetime.datetime.now()
- 
--
-     def run(self, test):
-         "Run the given test case or test suite."
-         result = _TestResult(self.verbosity)
-         test(result)
-         self.stopTime = datetime.datetime.now()
-         self.generateReport(test, result)
--        print >>sys.stderr, '\nTime Elapsed: %s' % (self.stopTime-self.startTime)
-+        print >> sys.stderr, '\nTime Elapsed: %s' % (self.stopTime - self.startTime)
-         return result
- 
--
-     def sortResult(self, result_list):
-         # unittest does not seems to run in any particular order.
-         # Here at least we want to group them together by class.
-         rmap = {}
-         classes = []
--        for n,t,o,e in result_list:
-+        for n, t, o, e in result_list:
-             cls = t.__class__
-             if not rmap.has_key(cls):
-                 rmap[cls] = []
-                 classes.append(cls)
--            rmap[cls].append((n,t,o,e))
-+            rmap[cls].append((n, t, o, e))
-         r = [(cls, rmap[cls]) for cls in classes]
-         return r
- 
--
-     def getReportAttributes(self, result):
-         """
-         Return report attributes as a list of (name, value).
-@@ -655,9 +641,9 @@
-         startTime = str(self.startTime)[:19]
-         duration = str(self.stopTime - self.startTime)
-         status = []
--        if result.success_count: status.append('Pass %s'    % result.success_count)
-+        if result.success_count: status.append('Pass %s' % result.success_count)
-         if result.failure_count: status.append('Failure %s' % result.failure_count)
--        if result.error_count:   status.append('Error %s'   % result.error_count  )
-+        if result.error_count:   status.append('Error %s' % result.error_count)
-         if status:
-             status = ' '.join(status)
-         else:
-@@ -668,7 +654,6 @@
-             ('Status', status),
-         ]
- 
--
-     def generateReport(self, test, result):
-         report_attrs = self.getReportAttributes(result)
-         generator = 'HTMLTestRunner %s' % __version__
-@@ -677,46 +662,46 @@
-         report = self._generate_report(result)
-         ending = self._generate_ending()
-         output = self.HTML_TMPL % dict(
--            title = saxutils.escape(self.title),
--            generator = generator,
--            stylesheet = stylesheet,
--            heading = heading,
--            report = report,
--            ending = ending,
-+            title=saxutils.escape(self.title),
-+            generator=generator,
-+            stylesheet=stylesheet,
-+            heading=heading,
-+            report=report,
-+            ending=ending,
-         )
-         self.stream.write(output.encode('utf8'))
- 
--
-     def _generate_stylesheet(self):
-         return self.STYLESHEET_TMPL
- 
--
-     def _generate_heading(self, report_attrs):
-         a_lines = []
-         for name, value in report_attrs:
-             line = self.HEADING_ATTRIBUTE_TMPL % dict(
--                    name = saxutils.escape(name),
--                    value = saxutils.escape(value),
--                )
-+                name=saxutils.escape(name),
-+                value=saxutils.escape(value),
-+            )
-             a_lines.append(line)
-         heading = self.HEADING_TMPL % dict(
--            title = saxutils.escape(self.title),
--            parameters = ''.join(a_lines),
--            description = saxutils.escape(self.description),
-+            title=saxutils.escape(self.title),
-+            parameters=''.join(a_lines),
-+            description=saxutils.escape(self.description),
-         )
-         return heading
- 
--
-     def _generate_report(self, result):
-         rows = []
-         sortedResult = self.sortResult(result.result)
-         for cid, (cls, cls_results) in enumerate(sortedResult):
-             # subtotal for a class
-             np = nf = ne = 0
--            for n,t,o,e in cls_results:
--                if n == 0: np += 1
--                elif n == 1: nf += 1
--                else: ne += 1
-+            for n, t, o, e in cls_results:
-+                if n == 0:
-+                    np += 1
-+                elif n == 1:
-+                    nf += 1
-+                else:
-+                    ne += 1
- 
-             # format class description
-             if cls.__module__ == "__main__":
-@@ -727,46 +712,45 @@
-             desc = doc and '%s: %s' % (name, doc) or name
- 
-             row = self.REPORT_CLASS_TMPL % dict(
--                style = ne > 0 and 'errorClass' or nf > 0 and 'failClass' or 'passClass',
--                desc = desc,
--                count = np+nf+ne,
--                Pass = np,
--                fail = nf,
--                error = ne,
--                cid = 'c%s' % (cid+1),
-+                style=ne > 0 and 'errorClass' or nf > 0 and 'failClass' or 'passClass',
-+                desc=desc,
-+                count=np + nf + ne,
-+                Pass=np,
-+                fail=nf,
-+                error=ne,
-+                cid='c%s' % (cid + 1),
-             )
-             rows.append(row)
- 
--            for tid, (n,t,o,e) in enumerate(cls_results):
-+            for tid, (n, t, o, e) in enumerate(cls_results):
-                 self._generate_report_test(rows, cid, tid, n, t, o, e)
- 
-         report = self.REPORT_TMPL % dict(
--            test_list = ''.join(rows),
--            count = str(result.success_count+result.failure_count+result.error_count),
--            Pass = str(result.success_count),
--            fail = str(result.failure_count),
--            error = str(result.error_count),
-+            test_list=''.join(rows),
-+            count=str(result.success_count + result.failure_count + result.error_count),
-+            Pass=str(result.success_count),
-+            fail=str(result.failure_count),
-+            error=str(result.error_count),
-         )
-         return report
- 
--
-     def _generate_report_test(self, rows, cid, tid, n, t, o, e):
-         # e.g. 'pt1.1', 'ft1.1', etc
-         has_output = bool(o or e)
--        tid = (n == 0 and 'p' or 'f') + 't%s.%s' % (cid+1,tid+1)
-+        tid = (n == 0 and 'p' or 'f') + 't%s.%s' % (cid + 1, tid + 1)
-         name = t.id().split('.')[-1]
-         doc = t.shortDescription() or ""
-         desc = doc and ('%s: %s' % (name, doc)) or name
-         tmpl = has_output and self.REPORT_TEST_WITH_OUTPUT_TMPL or self.REPORT_TEST_NO_OUTPUT_TMPL
- 
-         # o and e should be byte string because they are collected from stdout and stderr?
--        if isinstance(o,str):
-+        if isinstance(o, str):
-             # TODO: some problem with 'string_escape': it escape \n and mess up formating
-             # uo = unicode(o.encode('string_escape'))
-             uo = o.decode('latin-1')
-         else:
-             uo = o
--        if isinstance(e,str):
-+        if isinstance(e, str):
-             # TODO: some problem with 'string_escape': it escape \n and mess up formating
-             # ue = unicode(e.encode('string_escape'))
-             ue = e.decode('latin-1')
-@@ -774,17 +758,17 @@
-             ue = e
- 
-         script = self.REPORT_TEST_OUTPUT_TMPL % dict(
--            id = tid,
--            output = saxutils.escape(uo+ue),
-+            id=tid,
-+            output=saxutils.escape(uo + ue),
-         )
- 
-         row = tmpl % dict(
--            tid = tid,
--            Class = (n == 0 and 'hiddenRow' or 'none'),
--            style = n == 2 and 'errorCase' or (n == 1 and 'failCase' or 'none'),
--            desc = desc,
--            script = script,
--            status = self.STATUS[n],
-+            tid=tid,
-+            Class=(n == 0 and 'hiddenRow' or 'none'),
-+            style=n == 2 and 'errorCase' or (n == 1 and 'failCase' or 'none'),
-+            desc=desc,
-+            script=script,
-+            status=self.STATUS[n],
-         )
-         rows.append(row)
-         if not has_output:
-@@ -806,6 +790,7 @@
-     A variation of the unittest.TestProgram. Please refer to the base
-     class for command line parameters.
-     """
-+
-     def runTests(self):
-         # Pick HTMLTestRunner as the default test runner.
-         # base class's testRunner parameter is not useful because it means
-@@ -814,6 +799,7 @@
-             self.testRunner = HTMLTestRunner(verbosity=self.verbosity)
-         unittest.TestProgram.runTests(self)
- 
-+
- main = TestProgram
- 
- ##############################################################################
-Index: ChatBoot/chatbook.py
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>from chatterbot import ChatBot\r\nfrom chatterbot.trainers import ListTrainer\r\n\r\nmy_bot = ChatBot(name='PyBot', read_only=True,\r\n                 logic_adapters=['chatterbot.logic.mathematical.MathematicalEvaluation', 'chatterbot.logic.BestMatch'])\r\n\r\nsmall_talk = ['hi there!',\r\n              'hi!',\r\n              'how do you do?',\r\n              'how are you?',\r\n              'i\\'m cool.',\r\n              'fine, you?',\r\n              'always cool.',\r\n              'i\\'m ok',\r\n              'glad to hear that.',\r\n              'i\\'m fine',\r\n              'glad to hear that.',\r\n              'i feel awesome',\r\n              'excellent, glad to hear that.',\r\n              'not so good',\r\n              'sorry to hear that.',\r\n              'what\\'s your name?',\r\n              'i\\'m pybot. ask me a math question, please.']\r\nmath_talk_1 = ['pythagorean theorem',\r\n               'a squared plus b squared equals c squared.']\r\nmath_talk_2 = ['law of cosines',\r\n               'c**2 = a**2 + b**2 - 2 * a * b * cos(gamma)']\r\n\r\nlist_trainer = ListTrainer(my_bot)\r\nfor item in (small_talk, math_talk_1, math_talk_2):\r\n    list_trainer.train(item)\r\n\r\n\r\nprint(my_bot.get_response(\"hi\"))\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/ChatBoot/chatbook.py b/ChatBoot/chatbook.py
---- a/ChatBoot/chatbook.py	(revision a41e2489e5f6608f754b37f7da8b437e844e7c5c)
-+++ b/ChatBoot/chatbook.py	(date 1646115695665)
-@@ -30,5 +30,4 @@
- for item in (small_talk, math_talk_1, math_talk_2):
-     list_trainer.train(item)
- 
--
- print(my_bot.get_response("hi"))
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.10 (test)\" project-jdk-type=\"Python SDK\" />\r\n  <component name=\"PyCharmProfessionalAdvertiser\">\r\n    <option name=\"shown\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PythonCompatibilityInspectionAdvertiser\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 48100aa5f760e5fc65be50c88a24a6e6332bda21)
+++ b/.idea/misc.xml	(date 1645120523753)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10 (test)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8 (test)" project-jdk-type="Python SDK" />
   <component name="PyCharmProfessionalAdvertiser">
     <option name="shown" value="true" />
   </component>
